[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-4)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/pengju/Downloads/hw/src/main/scala/storage.scala","languageId":"scala","version":1,"text":"  // GENERATED\n/* INSTRUCTIONS\n *\n * Complete the exercises below.  For each \"EXERCISE\" comment, add code\n * immediately below the comment.\n *\n * Please see README.md for instructions, including compilation and testing.\n *\n * GRADING\n *\n * 1. Submissions MUST compile using SBT with UNCHANGED configuration and\n *    tests with no compilation errors.  Submissions with compilation errors\n *    will receive 0 points.  Note that refactoring the code will cause the\n *    tests to fail.\n *\n * 2. You MUST NOT edit the SBT configuration and tests.  Altering it in your\n *    submission will result in 0 points for this assignment.\n *\n * 3. You MAY use (re)assignment to variables and \"val\" and \"var\"\n *    declarations (you will have to).\n *\n * 4. In all of the exercises in this file, you can only add code between the\n *    existing \"{...}\" for the val/def.  That is, you cannot add a new\n *    val/def directly inside the \"storage\" object.\n *\n * SUBMISSION\n *\n * 1. Submit this file on D2L before the deadline.\n *\n * 2. Late submissions will not be permitted because solutions will be\n *    discussed in class.\n *\n */\n\nobject storage:\n\n  // EXERCISE 1: Complete the following definition, so that \"constant5\" is a\n  // function that returns 5 whenever it is invoked.\n  val constant5: () => Int =\n      // TODO: Complete the definition.\n      () => 5\n\n  // EXERCISE 2: Complete the following definition, so that \"constant\" is a\n  // function that when invoked with integer n returns a function that\n  // returns n whenever it is invoked.\n  val constant: Int => () => Int =\n        // TODO: Complete the definition.\n        (n: Int) => (() => n)\n\n  // EXERCISE 3: Complete the following definition, so that \"counter0\" is a\n  // (stateful) function that returns 0 when it is first invoked, then 1,\n  // then 2, etc.\n  //\n  // REMEMBER: you can use \"var\" but everything you add has to be inside the\n  // \"{...}\" body of \"counter0\".\n\n  // This rule applies throughout this assignment.\n  val counter0: () => Int =\n    // TODO: Complete the definition.\n    var n = -1\n    () => {\n        n += 1 \n        n\n      }\n\n  // EXERCISE 4: Complete the following definition, so that \"counter\" is a\n  // (stateless) function that when invoked with integer n returns a\n  // (stateful) function that returns n when it is first invoked, then n+1,\n  // then n+2, etc.\n  //\n  // The counters must be independent, i.e., running \"counter (0)\" twice\n  // should yield two functions that do not interfere with one another's\n  // state.\n  val counter: Int => () => Int =\n    // TODO: Complete the definition.\n    (n: Int) => {\n      var cn =  n - 1\n      () => {\n        cn += 1\n        cn\n      }\n    }\n\n  // EXERCISE 5: Complete the following definition, so that \"getAndSet\" is a\n  // (stateless) function that when invoked with integer n returns a pair of\n  // functions (that share state) that allow reading and writing a var that\n  // is initialized with integer n.\n  //\n  // The first function in the pair should be the reader.  The second\n  // function in the pair should be the writer.\n  //\n  // For example, the following expression should return 10:\n  // { val (get, set) = getAndSet (5); set (10); get () }\n  //\n  // Multiple calls to \"getAndSet\" should yield independent pairs, i.e., the\n  // first pair returned should not share any state with the second pair\n  // returned.\n  val getAndSet: Int => (() => Int, Int => Unit) =\n    // TODO: Complete the definition.\n    (n: Int) => {\n      var param = n\n      def get: () => Int = () => param\n      def set: Int => Unit = (m: Int) => param = m\n      (get, set)\n    }\n\n  // EXERCISE 6: Complete the following definition, so that \"getAndSetSpy\" is\n  // a (stateful) function that when invoked it returns a pair.\n  //\n  // The second component of the pair should behave like \"getAndSet\" above\n  // (with the exception noted next).\n  //\n  // The first component of the pair is a function that, when invoked,\n  // returns the total number of times that a \"set\" call has been made.\n  //\n  // That number should cover all calls to \"set\" made in all pairs created\n  // via \"getAndSetSpy\".  That is, the total number is a piece of state\n  // shared all \"set\" functions created via \"getAndSetSpy\".\n  //\n  // For example:\n  // val (spy1, getAndSet1) = getAndSetSpy ()\n  // val (spy2, getAndSet2) = getAndSetSpy ()\n  // val (get1a, set1a) = getAndSet1 (0)\n  // val (get2a, set2a) = getAndSet2 (0)\n  // set1a(10)\n  // set2a(20)\n  // spy1()\n  //   val res1: Int = 2\n  //\n  // The result is 2, not 1.\n  //\n  val getAndSetSpy: () => (() => Int, Int => (() => Int, Int => Unit)) =\n    // TODO: Complete the definition.\n    () => {\n      var count = 0\n      val getSetCount: Int => (() => Int, Int => Unit) = {\n        (n: Int) => {\n          var param = n\n          var get: () => Int = () => param\n          var set: Int => Unit = (m: Int) => {\n            param = m\n            count += 1\n          }\n          (get, set)\n        }\n      }\n      var getCount: () => Int = () => count\n      var getSpy: Int => (() => Int, Int => Unit) = getSetCount\n      (getCount, getSpy)\n    }\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@2b1aa390, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/pengju/Downloads/hw/target/scala-3.0.1/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed Oct 22, 2021, 2:28:54 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
